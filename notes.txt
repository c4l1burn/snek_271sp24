Today (4/8/24) Notes

Overview
  Fork()
  Sleep
Pthread
  Function Pointers
  arg structs
  create/exit/join
  wordcount

Fork() (presumably)

Fcntl() stands for file control

Fork() creates a child process by duplicating the calling process. The original is called the "parent process"
pid_t fork(void);
----
int main()
{
	if(fork()) 
	{
	print("elder process");
	} else {
	print("child process");
	}
	return 0 ;
}
  this works because fork() returns the pid for the parent and 0 for the child process
  ## Sample code on the slide using fork is the better way to do something once every (some amount of time)


The even better way to do that is with pthreads. Unfortunately I zoned out by this point



-----------------------------
5/6/24 notes
okay so im going through hridays code and trying to see what i can use, but before i forget:
my idea for implementing the snake body is as follows:
> have a snake_data struct
> store the position of the head with x, y on a grid
> store the length of the snake as well
> when reading from the buffer (recieving input) update the snakes position using some basic logic. if-then chaining will suffice.
> okay okay so:
1. have snake head position
2. copy snake head position into body[n_1]
3. update snake head position
4. derender elements of body outside the length
like
draw(" ", body[length + 1]);
something like that?
okay back to trawling

Current issues:
> gameover is nonfunctional
> no graphics

Grid done. Now i need to:
1. print the grid in the right order
2. put the right stuff in the grid











